# Copyright 2025 Advanced Micro Devices, Inc.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

name: Release Llama 3.1 405B FP4 Benchmarking Tests

on:
  workflow_dispatch:
  pull_request:
  push:
   branches:
     - main
  schedule:
    # Weekdays at 11:00 AM UTC = 03:00 AM PST / 04:00 AM PDT
    - cron: "0 11 * * 1-5"

permissions:
  contents: write

concurrency:
  # A PR number if a pull request and otherwise the commit hash. This cancels
  # queued and in-progress runs for the same PR (presubmit) or commit
  # (postsubmit). The workflow name is prepended to avoid conflicts between
  # different workflows.
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  test_docker_container:
    if: ${{ github.repository_owner == 'nod-ai' || github.event_name != 'schedule' }}
    timeout-minutes: 240
    name: "Test MI355 docker"
    strategy:
      matrix:
        version: [3.11]
      fail-fast: false
    runs-on: linux-mi355-1gpu-ossci-nod-ai
    container:
      image: rocm/7.0-preview:rocm7.0_preview_ubuntu_22.04_vllm_0.8.5_mi35X_prealpha
      options: --group-add video
        --device /dev/kfd
        --device /dev/dri
        --env-file /etc/podinfo/gha-gpu-isolation-settings
      volumes:
        - /usr:/usr
    defaults:
      run:
        shell: bash
    env:
      VENV_DIR: ${{ github.workspace }}/.venv
    steps:
      - name: Check for dockerenv file
        run: |
          (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
          rocm-smi
          ls

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setting up Python"
        id: setup_python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{matrix.version}}
      - name: Create Python venv
        run: |
           python -m venv ${VENV_DIR}
           source ${VENV_DIR}/bin/activate

      - name: Install pip deps
        run: |
          pip install -f https://iree.dev/pip-release-links.html --upgrade --pre iree-base-compiler iree-base-runtime iree-turbine
          iree-run-module --list_devices

  test_llama_large:
    if : false
    timeout-minutes: 240
    name: "Release: Llama 405B FP4 Benchmarking Tests"
    strategy:
      matrix:
        version: [3.11]
      fail-fast: false
    runs-on: linux-mi355-1gpu-ossci-nod-ai
    defaults:
      run:
        shell: bash
    env:
      VENV_DIR: ${{ github.workspace }}/.venv
      OFFLINE_SERVING: DISABLED
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setting up Python"
        id: setup_python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{matrix.version}}
      - name: Create Python venv
        run: |
           python -m venv ${VENV_DIR}
           source ${VENV_DIR}/bin/activate

      - name: Install pip deps
        run: |
          df -h
          rocm-smi
          mkdir -p output_artifacts
          wget https://aka.ms/downloadazcopy-v10-linux
          mkdir -p azutils && tar -xvf downloadazcopy-v10-linux -C azutils --strip-components=1
          ./azutils/azcopy copy https://sharkpublic.blob.core.windows.net/sharkpublic/halo-models/llm-dev/llama3_405b/fp4/fp4_2025_07_10_fn.irpa output_artifacts/
          ./azutils/azcopy copy https://sharkpublic.blob.core.windows.net/sharkpublic/halo-models/llm-dev/llama3_405b/fp4/tokenizer.json output_artifacts/
          ./azutils/azcopy copy https://sharkpublic.blob.core.windows.net/sharkpublic/halo-models/llm-dev/llama3_405b/fp4/tokenizer_config.json output_artifacts/
          ls output_artifacts
          bash scripts/setenv.sh --nightly-cpu
          pip freeze | grep -E 'iree|shark' > $(pwd)/output_artifacts/version.txt

      - name: Run export and compile
        run: |
          bash scripts/export_and_compile.sh \
             --irpa  $(pwd)/output_artifacts/fp4_2025_07_10_fn.irpa \
             --bs-prefill 4 --bs-decode 8 --dtype llama-405B-FP4

      - name: Validate VMFB Numerics
        run: |
          export ROCR_VISIBLE_DEVICES=0
          python -m sharktank.tools.run_llm_vmfb \
            --prompt "Capital of United States and India" \
            --irpa $(pwd)/output_artifacts/fp4_2025_07_10_fn.irpa \
            --vmfb $(pwd)/output_artifacts/output.vmfb \
            --config $(pwd)/output_artifacts/config_attn.json \
            --tokenizer $(pwd)/output_artifacts/tokenizer.json \
            --steps 60 \
            --kv-cache-dtype float8_e4m3fn | tee output_artifacts/run_llm_vmfb.log

      - name: Run IREE Benchmark Module
        run: |
          bash scripts/run_iree_benchmark.sh --bs-prefill 4 --bs-decode 8 \
             --parameters $(pwd)/output_artifacts/fp4_2025_07_10_fn.irpa \
             --model llama-405B-FP4
          python scripts/utils.py \
            --combine-json $(pwd)/output_artifacts/benchmark_module \
            --output-json $(pwd)/output_artifacts/consolidated_benchmark.json \
            --append-isl

      - name: Run online serving
        run: |
          cd shortfin
          export ROCR_VISIBLE_DEVICES=0
          bash ../scripts/run_serving.sh \
             --irpa $(pwd)/output_artifacts/fp4_2025_07_10_fn.irpa \
             --tokenizer_json $(pwd)/output_artifacts/tokenizer.json \
             --vmfb $(pwd)/output_artifacts/output.vmfb \
             --model_config $(pwd)/output_artifacts/config_attn.json \
             --port 8900 | tee ../output_artifacts/serving.log
          cd ..

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4.0.0
        with:
          github_token: ${{ secrets.SHARK_PLATFORM_GH_TOKEN }}
          publish_dir: ./out/llm/llama/benchmark
          destination_dir: ./llm/llama/benchmark
          keep_files: true

      - name: Upload llama executable files
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: llama-files
          path: ${{ github.workspace }}/${{ steps.date.outputs.date }}

      - name: Upload log files
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: llama-logs
          path: |
            output_artifacts/consolidated*.json
            output_artifacts/*.log
            output_artifacts/version.txt

      - name: Cleanup output artifacts
        run: |
            rm -rf output_artifacts
            test ! -d output_artifacts && echo "Output artifacts are removed"

  # New job to push logs to shark-ai-reports repository
  push_logs:
    name: "Push log llama 405B FP4"
    needs: [ test_llama_large ]
    runs-on: ubuntu-24.04
    steps:
    - name: Download log artifacts
      uses: actions/download-artifact@v4
      with:
        name: llama-logs
        path: logs

    - name: Checkout Target Repo
      uses: actions/checkout@v4
      with:
        repository: nod-ai/shark-ai-reports
        token: ${{ secrets.SHARK_AI_REPORTS_GITHUB_TOKEN }}
        path: shark-ai-reports

    - name: Push artifacts
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email ""
        date=$(date -u +'%Y-%m-%d')
        mkdir -p "shark-ai-reports/$date/llama-405b-fp4-logs"
        cp -v logs/*.json "shark-ai-reports/$date/llama-405b-fp4-logs"
        cp -v logs/*.log "shark-ai-reports/$date/llama-405b-fp4-logs"
        cp -v logs/version.txt "shark-ai-reports/$date/llama-405b-fp4-logs"
        cd shark-ai-reports
        git pull
        git add $date
        git commit -m "Add CI Llama 405B FP4 logs on $(date -u +'%Y-%m-%d')"
        git push origin main
        rm -rf ../logs
