# Copyright 2025 Advanced Micro Devices, Inc.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

name: CI - sharkfuser

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

concurrency:
  # A PR number if a pull request and otherwise the commit hash. This cancels
  # queued and in-progress runs for the same PR (presubmit) or commit
  # (postsubmit). The workflow name is prepended to avoid conflicts between
  # different workflows.
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

env:
  SHARKFUSER_DIR: ${{ github.workspace }}/sharkfuser
  DOCKER_DIR: ${{ github.workspace }}/docker

jobs:
  build-and-test:
    name: "Build & Test :: ${{ matrix.name }}"
    runs-on: ${{ matrix.runs-on }}
    defaults:
      run:
        # github actions swaps the {0} at the end for your script
        shell: bash --noprofile --norc -exo pipefail {0}
    strategy:
      fail-fast: false
      matrix:
        name: ["gfx942_clang18_release", "cpu_clang18_debug", "gfx942_clang18_debug", "cpu_gcc13_codecov"]
        include:
          - name: gfx942_clang18_release
            runs-on: linux-mi325-2gpu-ossci-nod-ai
            cmake-options:
              -DCMAKE_C_COMPILER=clang-18
              -DCMAKE_CXX_COMPILER=clang++-18
              -DCMAKE_LINKER_TYPE=LLD
              -DSHARKFUSER_DEBUG_BUILD=OFF
              -DSHARKFUSER_CODE_COVERAGE=OFF
              -DSHARKFUSER_SYSTEMS_AMDGPU=ON
          - name: cpu_clang18_debug
            runs-on: azure-cpubuilder-linux-scale
            cmake-options:
              -DCMAKE_C_COMPILER=clang-18
              -DCMAKE_CXX_COMPILER=clang++-18
              -DCMAKE_LINKER_TYPE=LLD
              -DSHARKFUSER_DEBUG_BUILD=ON
              -DSHARKFUSER_CODE_COVERAGE=OFF
              -DSHARKFUSER_SYSTEMS_AMDGPU=OFF
          - name: gfx942_clang18_debug
            runs-on: linux-mi325-2gpu-ossci-nod-ai
            cmake-options:
              -DCMAKE_C_COMPILER=clang-18
              -DCMAKE_CXX_COMPILER=clang++-18
              -DCMAKE_LINKER_TYPE=LLD
              -DSHARKFUSER_DEBUG_BUILD=ON
              -DSHARKFUSER_CODE_COVERAGE=OFF
              -DSHARKFUSER_SYSTEMS_AMDGPU=ON
          - name: cpu_gcc13_codecov
            runs-on: azure-cpubuilder-linux-scale
            cmake-options:
              -DCMAKE_C_COMPILER=gcc-13
              -DCMAKE_CXX_COMPILER=g++-13
              -DSHARKFUSER_DEBUG_BUILD=OFF
              -DSHARKFUSER_CODE_COVERAGE=ON
              -DSHARKFUSER_SYSTEMS_AMDGPU=OFF

    steps:
    - name: Checkout sharkfuser
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Checkout docker
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: sjain-stanford/docker
        path: docker
        ref: 6f8dc8c00963aaffc2e3064c7389d27d31a5925f

    # Pass FUSILLI_CACHE_DIR=/tmp to configure the compilation cache
    # to be written to /tmp. It defaults to $HOME when not set but there
    # are permissions issues with GitHub runners when accessing $HOME.
    # TODO: Figure a way to allow writing to $HOME so we can remove
    # needing to set `FUSILLI_CACHE_DIR`.
    - name: Build sharkfuser
      working-directory: ${{ env.SHARKFUSER_DIR }}
      run: |
        ${{ env.DOCKER_DIR }}/exec_docker.sh \
        bash -c "export FUSILLI_CACHE_DIR=/tmp && \
                 cmake -GNinja -S. -Bbuild \
                   -DIREERuntime_DIR=/opt/iree/build/lib/cmake/IREE \
                   ${{ matrix.cmake-options }} && \
                 cmake --build build --target all"

    - name: Test sharkfuser
      if: ${{ matrix.name != 'cpu_gcc13_codecov' }}
      working-directory: ${{ env.SHARKFUSER_DIR }}
      run: |
        ${{ env.DOCKER_DIR }}/exec_docker.sh \
        bash -c "export FUSILLI_CACHE_DIR=/tmp && \
                 ctest --test-dir build --output-on-failure --extra-verbose --timeout 30 && \
                 tests/test_cache_empty.sh"

    - name: Run code coverage
      if: ${{ matrix.name == 'cpu_gcc13_codecov' }}
      working-directory: ${{ env.SHARKFUSER_DIR }}
      run: |
        ${{ env.DOCKER_DIR }}/exec_docker.sh \
        bash -c "export FUSILLI_CACHE_DIR=/tmp && \
                 ctest --test-dir build -T test -T coverage --timeout 30 && \
                 lcov --capture --directory build --output-file build/coverage.info && \
                 lcov --remove build/coverage.info '/usr/*' '*/iree/*' --output-file build/coverage.info && \
                 genhtml build/coverage.info --output-directory coverage_report"

    - name: Upload code coverage report
      if: ${{ matrix.name == 'cpu_gcc13_codecov' }}
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: coverage-report
        path: ${{ env.SHARKFUSER_DIR }}/coverage_report

  # Depends on all other jobs to provide an aggregate job status.
  ci_sharkfuser_summary:
    if: always()
    runs-on: ubuntu-24.04
    needs:
      - build-and-test
    steps:
      - name: Getting failed jobs
        run: |
          echo '${{ toJson(needs) }}'
          FAILED_JOBS="$(echo '${{ toJson(needs) }}' \
            | jq --raw-output \
            'map_values(select(.result!="success" and .result!="skipped")) | keys | join(",")' \
          )"
          if [[ "${FAILED_JOBS}" != "" ]]; then
            echo "The following jobs failed: ${FAILED_JOBS}"
            exit 1
          fi
