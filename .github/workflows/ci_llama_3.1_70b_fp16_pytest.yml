# Copyright 2024 Advanced Micro Devices, Inc.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

name: Release Llama 3.1 70B FP16 Benchmarking Tests

on:
  workflow_dispatch:
  schedule:
    # Weekdays at 11:00 AM UTC = 03:00 AM PST / 04:00 AM PDT
    - cron: "0 13 * * *"

permissions:
  contents: write

concurrency:
  # A PR number if a pull request and otherwise the commit hash. This cancels
  # queued and in-progress runs for the same PR (presubmit) or commit
  # (postsubmit). The workflow name is prepended to avoid conflicts between
  # different workflows.
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  test_llama_large:
    if: ${{ github.repository_owner == 'nod-ai' || github.event_name != 'schedule' }}
    timeout-minutes: 240
    name: "Release: Llama 70B FP16 Benchmarking Tests"
    strategy:
      matrix:
        version: [3.11]
      fail-fast: false
    runs-on: linux-mi325-1gpu-ossci-nod-ai
    defaults:
      run:
        shell: bash
    env:
      VENV_DIR: ${{ github.workspace }}/.venv
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setting up Python"
        id: setup_python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{matrix.version}}
      - name: Create Python venv
        run: |
           python -m venv ${VENV_DIR}
           source ${VENV_DIR}/bin/activate

      - name: Install pip deps
        run: |
          bash scripts/setenv.sh --nightly
          mkdir -p output_artifacts
          pip freeze | grep -E 'iree|shark' > $(pwd)/output_artifacts/version.txt
          pip install pytest

      - name: Run export and compile
        id: export_compile
        run: |
            pytest -s tests/ -k compile --model llama-70b-fp16 -vv

      - name: Validate VMFB Responses
        id: validate_vmfb
        if: ${{ steps.export_compile.outcome == 'success' }}
        continue-on-error: true
        run: |
          echo "Validate Responses"
          pytest -s tests/ -k validate_vmfb --model llama-70b-fp16 -vv

      - name: Run IREE Benchmark Module
        if: ${{ steps.export_compile.outcome == 'success' }}
        run: |
          pytest -s tests/ -k benchmark --model llama-70b-fp16 -vv

      - name: Run online serving
        if: ${{ steps.export_compile.outcome == 'success' }}
        run: |
          export ROCR_VISIBLE_DEVICES=0
          pytest -s tests/ -k online_serving --model llama-70b-fp16 -vv
          cd ..

      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4.0.0
        with:
          github_token: ${{ secrets.SHARK_PLATFORM_GH_TOKEN }}
          publish_dir: ./out/llm/llama/benchmark
          destination_dir: ./llm/llama/benchmark
          keep_files: true

      - name: Upload llama executable files
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: llama-files
          path: ${{ github.workspace }}/${{ steps.date.outputs.date }}

      - name: Upload log files
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: llama-logs
          path: |
            output_artifacts/consolidated*.json
            output_artifacts/*.log
            output_artifacts/version.txt

      - name: Cleanup output artifacts
        if: always()
        run: |
            rm -rf output_artifacts
            test ! -d output_artifacts && echo "Output artifacts are removed"

  # New job to push logs to shark-ai-reports repository
  push_logs:
    name: "Push log llama 70B FP16"
    needs: [ test_llama_large ]
    if: always()
    runs-on: linux-mi325-1gpu-ossci-nod-ai
    steps:
    - name: Download log artifacts
      uses: actions/download-artifact@v4
      with:
        name: llama-logs
        path: logs

    - name: Checkout Target Repo
      if: always()
      uses: actions/checkout@v4
      with:
        repository: nod-ai/shark-ai-reports
        token: ${{ secrets.SHARK_AI_REPORTS_GITHUB_TOKEN }}
        path: shark-ai-reports

    - name: Push artifacts
      if: always()
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email ""
        date=$(date -u +'%Y-%m-%d')
        mkdir -p "shark-ai-reports/$date/llama_3.1-70b-fp16-pytest"
        cp -v logs/*.json "shark-ai-reports/$date/llama_3.1-70b-fp16-pytest" || true
        cp -v logs/*.log "shark-ai-reports/$date/llama_3.1-70b-fp16-pytest" || true
        cp -v logs/version.txt "shark-ai-reports/$date/llama_3.1-70b-fp16-pytest"
        cd shark-ai-reports
        git pull
        git add $date
        git commit -m "Add CI Llama 70B FP16 logs on $(date -u +'%Y-%m-%d')"
        git push origin main
        rm -rf ../logs
